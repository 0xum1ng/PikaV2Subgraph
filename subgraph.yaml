specVersion: 0.0.2
schema:
  file: ./schema.graphql
dataSources:
  - kind: ethereum/contract
    name: PikaPerpV3
    network: optimism
    source:
      address: "0xCcB94ecc64F1D8Fb671C2D7E8b5F2e005C22d3CA"
      abi: PikaPerpV3
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - AddMargin
        - ClosePosition
        - NewPosition
        - OwnerUpdated
        - PositionLiquidated
        - ProductAdded
        - ProductUpdated
        - Redeemed
        - Staked
        - VaultUpdated
        - ProtocolRewardDistributed
        - PikaRewardDistributed
        - VaultRewardDistributed
      abis:
        - name: PikaPerpV3
          file: ./abis/PikaPerpV3.json
      eventHandlers:
        - event: AddMargin(indexed uint256,indexed address,indexed address,uint256,uint256,uint256)
          handler: handleAddMargin
        - event: ClosePosition(indexed uint256,indexed address,indexed uint256,uint256,uint256,uint256,uint256,uint256,int256,bool)
          handler: handleClosePosition
        - event: NewPosition(indexed uint256,indexed address,indexed uint256,bool,uint256,uint256,uint256,uint256,uint256,bool)
          handler: handleNewPosition
        - event: OwnerUpdated(address)
          handler: handleOwnerUpdated
        - event: PositionLiquidated(indexed uint256,indexed address,uint256,uint256)
          handler: handlePositionLiquidated
        - event: ProductAdded(uint256,(address,uint72,uint16,bool,uint64,uint64,uint16,uint16,uint16,uint16,uint16,uint64))
          handler: handleProductAdded
        - event: ProductUpdated(uint256,(address,uint72,uint16,bool,uint64,uint64,uint16,uint16,uint16,uint16,uint16,uint64))
          handler: handleProductUpdated
        - event: Redeemed(indexed address,indexed address,uint256,uint256,uint256,bool)
          handler: handleRedeemed
        - event: Staked(indexed address,uint256,uint256)
          handler: handleStaked
        - event: VaultUpdated((uint96,uint96,uint64,uint64,uint32))
          handler: handleVaultUpdated
        - event: ProtocolRewardDistributed(address,uint256)
          handler: handleProtocolRewardDistributed
        - event: PikaRewardDistributed(address,uint256)
          handler: handlePikaRewardDistributed
        - event: VaultRewardDistributed(address,uint256)
          handler: handleVaultRewardDistributed
      file: ./src/mapping.ts

  - kind: ethereum/contract
    name: VaultFeeReward
    network: optimism
    source:
      address: "0xD85379e2FA8876777F85E9FE2E4a787e4c9f197D"
      abi: VaultFeeReward
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - ClaimedReward
        - Reinvested
      abis:
        - name: VaultFeeReward
          file: ./abis/VaultFeeReward.json
      eventHandlers:
        - event: ClaimedReward(address,address,uint256)
          handler: handleClaimedReward
        - event: Reinvested(address,address,uint256)
          handler: handleReinvested
      file: ./src/mapping.ts

  - kind: ethereum/contract
    name: OrderBook
    network: optimism
    source:
      address: "0x1997943aFcf4AB46811494E01C05b634E982E70c"
      abi: OrderBook
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - CreateOpenOrder
        - CancelOpenOrder
        - ExecuteOpenOrder
        - UpdateOpenOrder
        - CreateCloseOrder
        - CancelCloseOrder
        - ExecuteCloseOrder
        - UpdateCloseOrder
      abis:
        - name: OrderBook
          file: ./abis/OrderBook.json
      eventHandlers:
        - event: CreateOpenOrder(indexed address,uint256,uint256,uint256,uint256,uint256,bool,uint256,bool,uint256,uint256)
          handler: handleCreateOpenOrder
        - event: CancelOpenOrder(indexed address,uint256,uint256,uint256,uint256,uint256,bool,uint256,bool,uint256,uint256)
          handler: handleCancelOpenOrder
        - event: ExecuteOpenOrder(indexed address,uint256,uint256,uint256,uint256,uint256,bool,uint256,bool,uint256,uint256,uint256)
          handler: handleExecuteOpenOrder
        - event: UpdateOpenOrder(indexed address,uint256,uint256,uint256,uint256,uint256,bool,uint256,bool,uint256)
          handler: handleUpdateOpenOrder
        - event: CreateCloseOrder(indexed address,uint256,uint256,uint256,bool,uint256,bool,uint256,uint256)
          handler: handleCreateCloseOrder
        - event: CancelCloseOrder(indexed address,uint256,uint256,uint256,bool,uint256,bool,uint256,uint256)
          handler: handleCancelCloseOrder
        - event: ExecuteCloseOrder(indexed address,uint256,uint256,uint256,bool,uint256,bool,uint256,uint256,uint256)
          handler: handleExecuteCloseOrder
        - event: UpdateCloseOrder(indexed address,uint256,uint256,uint256,bool,uint256,bool,uint256)
          handler: handleUpdateCloseOrder

      file: ./src/orders.ts

  - kind: ethereum/contract
    name: PositionManager
    network: optimism
    source:
      address: "0xF11fc87bF8B13e13E64C7cb600886f85d26f4a55"
      abi: PositionManager
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - CreateOpenPosition
        - CancelOpenPosition
        - ExecuteOpenPosition
        - CreateClosePosition
        - CancelClosePosition
        - ExecuteClosePosition
      abis:
        - name: PositionManager
          file: ./abis/PositionManager.json
      eventHandlers:
        - event: CreateOpenPosition(indexed address,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256)
          handler: handleCreateOpenPosition
        - event: CancelOpenPosition(indexed address,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256)
          handler: handleCancelOpenPosition
        - event: ExecuteOpenPosition(indexed address,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256)
          handler: handleExecuteOpenPosition
        - event: CreateClosePosition(indexed address,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256)
          handler: handleCreateClosePosition
        - event: CancelClosePosition(indexed address,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256)
          handler: handleCancelClosePosition
        - event: ExecuteClosePosition(indexed address,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256)
          handler: handleExecuteClosePosition

      file: ./src/orders.ts